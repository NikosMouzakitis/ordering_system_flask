import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URI;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.prefs.Preferences;
import org.json.JSONArray;
import org.json.JSONObject;
import java.net.URISyntaxException;
import javax.websocket.*;

@ClientEndpoint
public class KitchenDisplaySystem {
    private static final String PREFS_KEY = "server_ip";
    private static String serverIp = "";
    private static List<JSONObject> orders = new ArrayList<>();
    private static boolean isLoading = true;
    private static Session websocketSession;
    
    private static JFrame frame;
    private static JPanel mainPanel;
    private static JButton refreshButton;
    
    public static void main(String[] args) {
        // Load saved server IP
        Preferences prefs = Preferences.userRoot().node(KitchenDisplaySystem.class.getName());
        serverIp = prefs.get(PREFS_KEY, "");
        
        SwingUtilities.invokeLater(() -> {
            createAndShowGUI();
            if (!serverIp.isEmpty()) {
                connectToWebSocket();
                fetchOrders();
            } else {
                showIpConfigDialog();
            }
        });
    }
    
    private static void createAndShowGUI() {
        frame = new JFrame("Kitchen Display System");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(800, 600);
        
        mainPanel = new JPanel();
        mainPanel.setLayout(new BorderLayout());
        
        // Create toolbar
        JToolBar toolBar = new JToolBar();
        refreshButton = new JButton("Refresh");
        refreshButton.addActionListener(e -> fetchOrders());
        toolBar.add(refreshButton);
        
        frame.add(toolBar, BorderLayout.NORTH);
        frame.add(new JScrollPane(mainPanel), BorderLayout.CENTER);
        
        frame.setVisible(true);
    }
    
    private static void showIpConfigDialog() {
        JPanel panel = new JPanel(new BorderLayout(5, 5));
        panel.add(new JLabel("Server IP Address:"), BorderLayout.WEST);
        JTextField ipField = new JTextField(serverIp, 15);
        panel.add(ipField, BorderLayout.CENTER);
        
        int result = JOptionPane.showConfirmDialog(
            frame, 
            panel, 
            "Server Configuration", 
            JOptionPane.OK_CANCEL_OPTION, 
            JOptionPane.PLAIN_MESSAGE
        );
        
        if (result == JOptionPane.OK_OPTION) {
            serverIp = ipField.getText().trim();
            if (!serverIp.isEmpty()) {
                Preferences prefs = Preferences.userRoot().node(KitchenDisplaySystem.class.getName());
                prefs.put(PREFS_KEY, serverIp);
                connectToWebSocket();
                fetchOrders();
            }
        }
    }
    
    private static void connectToWebSocket() {
        try {
            WebSocketContainer container = ContainerProvider.getWebSocketContainer();
            container.connectToServer(new Endpoint() {
                @Override
                public void onOpen(Session session, EndpointConfig config) {
                    System.out.println("Connected to KDS server");
                    websocketSession = session;
                    session.addMessageHandler(new MessageHandler.Whole<String>() {
    @Override
    public void onMessage(String message) {
        System.out.println("Received message: " + message);
        JSONObject json = new JSONObject(message);
        String event = json.getString("event");
        
        SwingUtilities.invokeLater(() -> {
            if ("new_order".equals(event)) {  // Fixed this line
                System.out.println("New order received via socket");
                fetchOrders();
            } else if ("item_completed".equals(event)) {
                System.out.println("Item completed via socket");
                fetchOrders();
            } else if ("order_completed".equals(event)) {
                System.out.println("Order completed via socket");
                fetchOrders();
            }
				});
				 }
			}); 
                   
                }
            }, new URI("ws://" + serverIp + ":5000"));
        } catch (Exception e) {
            System.err.println("WebSocket connection error: " + e.getMessage());
            JOptionPane.showMessageDialog(frame, "WebSocket connection error: " + e.getMessage(), 
                "Connection Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private static void fetchOrders() {
        SwingUtilities.invokeLater(() -> {
            mainPanel.removeAll();
            mainPanel.add(new JLabel("Loading orders...", SwingConstants.CENTER), BorderLayout.CENTER);
            mainPanel.revalidate();
            mainPanel.repaint();
        });
        
        new Thread(() -> {
            try {
                URL url = new URL("http://" + serverIp + ":5000/api/kds/orders?station=kitchen");
                HttpURLConnection conn = (HttpURLConnection) url.openConnection();
                conn.setRequestMethod("GET");
                
                int responseCode = conn.getResponseCode();
                if (responseCode == HttpURLConnection.HTTP_OK) {
                    BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                    String inputLine;
                    StringBuilder response = new StringBuilder();
                    
                    while ((inputLine = in.readLine()) != null) {
                        response.append(inputLine);
                    }
                    in.close();
                    
                    JSONArray ordersArray = new JSONArray(response.toString());
                    orders.clear();
                    for (int i = 0; i < ordersArray.length(); i++) {
                        orders.add(ordersArray.getJSONObject(i));
                    }
                    
                    SwingUtilities.invokeLater(() -> updateOrdersDisplay());
                } else {
                    throw new IOException("HTTP error code: " + responseCode);
                }
            } catch (Exception e) {
                System.err.println("Error fetching orders: " + e.getMessage());
                SwingUtilities.invokeLater(() -> {
                    JOptionPane.showMessageDialog(frame, "Error loading orders: " + e.getMessage(), 
                        "Error", JOptionPane.ERROR_MESSAGE);
                    mainPanel.removeAll();
                    mainPanel.add(new JLabel("Error loading orders", SwingConstants.CENTER), BorderLayout.CENTER);
                    mainPanel.revalidate();
                    mainPanel.repaint();
                });
            }
        }).start();
    }
    
    private static void updateOrdersDisplay() {
        mainPanel.removeAll();
        
        if (orders.isEmpty()) {
            mainPanel.add(new JLabel("No pending orders", SwingConstants.CENTER), BorderLayout.CENTER);
            mainPanel.revalidate();
            mainPanel.repaint();
            return;
        }
        
        JPanel ordersPanel = new JPanel();
        ordersPanel.setLayout(new BoxLayout(ordersPanel, BoxLayout.Y_AXIS));
        
        for (JSONObject order : orders) {
            JPanel orderPanel = new JPanel();
            orderPanel.setLayout(new BorderLayout());
            orderPanel.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createEmptyBorder(5, 5, 5, 5),
                BorderFactory.createLineBorder(Color.GRAY)
            ));
            
            // Header with table and wait time
            JPanel headerPanel = new JPanel(new BorderLayout());
            JLabel tableLabel = new JLabel("Table " + order.getInt("table_id"));
            tableLabel.setFont(tableLabel.getFont().deriveFont(Font.BOLD, 14));
            headerPanel.add(tableLabel, BorderLayout.WEST);
            
            JLabel waitTimeLabel = new JLabel("Waiting: " + order.getString("wait_time"));
            waitTimeLabel.setForeground(Color.GRAY);
            headerPanel.add(waitTimeLabel, BorderLayout.EAST);
            
            orderPanel.add(headerPanel, BorderLayout.NORTH);
            
            // Items list
            JPanel itemsPanel = new JPanel();
            itemsPanel.setLayout(new BoxLayout(itemsPanel, BoxLayout.Y_AXIS));
            
            JSONArray items = order.getJSONArray("items");
            boolean allItemsCompleted = true;
            
            for (int i = 0; i < items.length(); i++) {
                JSONObject item = items.getJSONObject(i);
                if (!item.getBoolean("completed")) {
                    allItemsCompleted = false;
                }
                
                JPanel itemPanel = new JPanel(new BorderLayout());
                
                if (item.getBoolean("completed")) {
                    JLabel checkIcon = new JLabel(new ImageIcon("check.png")); // You'd need an icon
                    itemPanel.add(checkIcon, BorderLayout.WEST);
                }
                
                JLabel nameLabel = new JLabel(item.getString("name"));
                if (item.getBoolean("completed")) {
                    nameLabel.setFont(nameLabel.getFont().deriveFont(Font.PLAIN | Font.ITALIC));
                }
                itemPanel.add(nameLabel, BorderLayout.CENTER);
                
                JLabel categoryLabel = new JLabel(item.getString("category"));
                categoryLabel.setForeground(Color.GRAY);
                itemPanel.add(categoryLabel, BorderLayout.SOUTH);
                
                if (!item.getBoolean("completed")) {
                    JButton completeButton = new JButton("Complete");
                    completeButton.addActionListener(new CompleteItemListener(order.getInt("id"), item.getInt("id")));
                    itemPanel.add(completeButton, BorderLayout.EAST);
                }
                
                itemsPanel.add(itemPanel);
                itemsPanel.add(Box.createRigidArea(new Dimension(0, 5)));
            }
            
            JScrollPane itemsScrollPane = new JScrollPane(itemsPanel);
            orderPanel.add(itemsScrollPane, BorderLayout.CENTER);
            
            // Complete order button
            JButton completeOrderButton = new JButton(allItemsCompleted ? "Complete Order" : "Force Complete");
            completeOrderButton.setBackground(allItemsCompleted ? Color.GREEN : Color.ORANGE);
            completeOrderButton.addActionListener(new CompleteOrderListener(order.getInt("id")));
            
            JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
            buttonPanel.add(completeOrderButton);
            orderPanel.add(buttonPanel, BorderLayout.SOUTH);
            
            ordersPanel.add(orderPanel);
            ordersPanel.add(Box.createRigidArea(new Dimension(0, 10)));
        }
        
        JScrollPane scrollPane = new JScrollPane(ordersPanel);
        mainPanel.add(scrollPane, BorderLayout.CENTER);
        mainPanel.revalidate();
        mainPanel.repaint();
    }
    
    private static class CompleteItemListener implements ActionListener {
        private int orderId;
        private int itemId;
        
        public CompleteItemListener(int orderId, int itemId) {
            this.orderId = orderId;
            this.itemId = itemId;
        }
        
        @Override
        public void actionPerformed(ActionEvent e) {
            new Thread(() -> {
                try {
                    URL url = new URL("http://" + serverIp + ":5000/api/kds/complete_item");
                    HttpURLConnection conn = (HttpURLConnection) url.openConnection();
                    conn.setRequestMethod("POST");
                    conn.setRequestProperty("Content-Type", "application/json");
                    conn.setDoOutput(true);
                    
                    JSONObject requestBody = new JSONObject();
                    requestBody.put("order_id", orderId);
                    requestBody.put("item_id", itemId);
                    
                    try (OutputStream os = conn.getOutputStream()) {
                        byte[] input = requestBody.toString().getBytes("utf-8");
                        os.write(input, 0, input.length);
                    }
                    
                    int responseCode = conn.getResponseCode();
                    if (responseCode != HttpURLConnection.HTTP_OK) {
                        throw new IOException("HTTP error code: " + responseCode);
                    }
                    
                    SwingUtilities.invokeLater(() -> fetchOrders());
                } catch (Exception ex) {
                    System.err.println("Error completing item: " + ex.getMessage());
                    SwingUtilities.invokeLater(() -> {
                        JOptionPane.showMessageDialog(frame, "Error completing item: " + ex.getMessage(), 
                            "Error", JOptionPane.ERROR_MESSAGE);
                    });
                }
            }).start();
        }
    }
    
    private static class CompleteOrderListener implements ActionListener {
        private int orderId;
        
        public CompleteOrderListener(int orderId) {
            this.orderId = orderId;
        }
        
        @Override
        public void actionPerformed(ActionEvent e) {
            // Find the order to check for pending items
            JSONObject order = null;
            for (JSONObject o : orders) {
                if (o.getInt("id") == orderId) {
                    order = o;
                    break;
                }
            }
            
            if (order == null) return;
            
            // Check for pending items
            JSONArray items = order.getJSONArray("items");
            List<JSONObject> pendingItems = new ArrayList<>();
            for (int i = 0; i < items.length(); i++) {
                JSONObject item = items.getJSONObject(i);
                if (!item.getBoolean("completed")) {
                    pendingItems.add(item);
                }
            }
            
            if (!pendingItems.isEmpty()) {
                int confirm = JOptionPane.showConfirmDialog(frame, 
                    "There are " + pendingItems.size() + " items not marked as prepared.\n" +
                    "Complete the entire order anyway?", 
                    "Complete Order?", 
                    JOptionPane.YES_NO_OPTION);
                
                if (confirm != JOptionPane.YES_OPTION) {
                    return;
                }
            }
            
            new Thread(() -> {
                try {
                    URL url = new URL("http://" + serverIp + ":5000/api/kds/complete");
                    HttpURLConnection conn = (HttpURLConnection) url.openConnection();
                    conn.setRequestMethod("POST");
                    conn.setRequestProperty("Content-Type", "application/json");
                    conn.setDoOutput(true);
                    
                    JSONObject requestBody = new JSONObject();
                    requestBody.put("order_id", orderId);
                    
                    try (OutputStream os = conn.getOutputStream()) {
                        byte[] input = requestBody.toString().getBytes("utf-8");
                        os.write(input, 0, input.length);
                    }
                    
                    int responseCode = conn.getResponseCode();
                    if (responseCode != HttpURLConnection.HTTP_OK) {
                        throw new IOException("HTTP error code: " + responseCode);
                    }
                    
                    SwingUtilities.invokeLater(() -> fetchOrders());
                } catch (Exception ex) {
                    System.err.println("Error completing order: " + ex.getMessage());
                    SwingUtilities.invokeLater(() -> {
                        JOptionPane.showMessageDialog(frame, "Error completing order: " + ex.getMessage(), 
                            "Error", JOptionPane.ERROR_MESSAGE);
                    });
                }
            }).start();
        }
    }
}
